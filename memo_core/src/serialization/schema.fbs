struct ReplicaId {
  first_8_bytes: uint64;
  last_8_bytes: uint64;
}

struct Timestamp {
  value:uint64;
  replica_id:ReplicaId;
}

table GlobalTimestamp {
  timestamps:[Timestamp];
}

namespace buffer;

enum AnchorVariant : byte { Start, Middle, End }

enum AnchorBias : byte { Left, Right }

table Anchor {
  variant:AnchorVariant;
  insertion_id:Timestamp;
  offset:uint64;
  bias:AnchorBias;
}

table Selection {
  start:Anchor;
  end:Anchor;
  reversed:bool;
}

table Edit {
  start_id:Timestamp;
  start_offset:uint64;
  end_id:Timestamp;
  end_offset:uint64;
  version_in_range:GlobalTimestamp;
  new_text:string;
  local_timestamp:Timestamp;
  lamport_timestamp:Timestamp;
}

table UpdateSelections {
  set_id:Timestamp;
  selections:[Selection];
  lamport_timestamp:Timestamp;
}

union OperationVariant { Edit, UpdateSelections }

table Operation {
  variant: OperationVariant;
}

namespace epoch;

table BaseFileId {
  index:uint64;
}

table NewFileId {
  id:Timestamp;
}

union FileId { BaseFileId, NewFileId }

enum FileType : byte { Directory, Text }

table InsertMetadata {
  file_id:FileId;
  file_type:FileType;
  parent_id:FileId;
  name_in_parent:string;
  local_timestamp:Timestamp;
  lamport_timestamp:Timestamp;
}

table UpdateParent {
  child_id:FileId;
  new_parent_id:FileId;
  new_name_in_parent:string;
  local_timestamp:Timestamp;
  lamport_timestamp:Timestamp;
}

table BufferOperation {
  file_id:FileId;
  operations:[buffer.Operation];
  local_timestamp:Timestamp;
  lamport_timestamp:Timestamp;
}

table UpdateActiveLocation {
  file_id:FileId;
  lamport_timestamp:Timestamp;
}

union Operation { InsertMetadata, UpdateParent, BufferOperation, UpdateActiveLocation }

namespace worktree;

table StartEpoch {
  epoch_id:Timestamp;
  head:[ubyte];
}

table EpochOperation {
  epoch_id:Timestamp;
  operation:epoch.Operation;
}

union OperationVariant { StartEpoch, EpochOperation }

table Operation {
   variant:OperationVariant;
}

root_type Operation;
